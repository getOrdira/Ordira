// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/[brand]/gate" | "/[brand]/proposals" | "/auth/login" | "/auth/login/mobile" | "/auth/register" | "/auth/register/mobile" | "/auth/verify-email" | "/brand/account/settings" | "/brand/account/settings/assets" | "/brand/account/settings/billing" | "/brand/account/settings/css" | "/brand/account/settings/domains" | "/brand/account/settings/profile" | "/brand/account/settings/theme" | "/brand/analytics" | "/brand/analytics/certificates" | "/brand/analytics/engagement" | "/brand/analytics/products" | "/brand/analytics/transactions" | "/brand/analytics/votes" | "/brand/certificates" | "/brand/dashboard" | "/brand/integrations" | "/brand/products" | "/brand/voting" | "/certificate/[id]" | "/gate" | "/manufacturer/account/settings" | "/manufacturer/account/settings/billing" | "/manufacturer/account/settings/profile" | "/manufacturer/analytics" | "/manufacturer/brands" | "/manufacturer/dashboard" | "/manufacturer/products" | "/proposals" | "/vote"
type AppRouteHandlerRoutes = "/auth/logout"
type PageRoutes = never
type LayoutRoutes = "/" | "/[brand]" | "/brand" | "/manufacturer" | "/vote"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/[brand]": { "brand": string; }
  "/[brand]/gate": { "brand": string; }
  "/[brand]/proposals": { "brand": string; }
  "/auth/login": {}
  "/auth/login/mobile": {}
  "/auth/logout": {}
  "/auth/register": {}
  "/auth/register/mobile": {}
  "/auth/verify-email": {}
  "/brand": {}
  "/brand/account/settings": {}
  "/brand/account/settings/assets": {}
  "/brand/account/settings/billing": {}
  "/brand/account/settings/css": {}
  "/brand/account/settings/domains": {}
  "/brand/account/settings/profile": {}
  "/brand/account/settings/theme": {}
  "/brand/analytics": {}
  "/brand/analytics/certificates": {}
  "/brand/analytics/engagement": {}
  "/brand/analytics/products": {}
  "/brand/analytics/transactions": {}
  "/brand/analytics/votes": {}
  "/brand/certificates": {}
  "/brand/dashboard": {}
  "/brand/integrations": {}
  "/brand/products": {}
  "/brand/voting": {}
  "/certificate/[id]": { "id": string; }
  "/gate": {}
  "/manufacturer": {}
  "/manufacturer/account/settings": {}
  "/manufacturer/account/settings/billing": {}
  "/manufacturer/account/settings/profile": {}
  "/manufacturer/analytics": {}
  "/manufacturer/brands": {}
  "/manufacturer/dashboard": {}
  "/manufacturer/products": {}
  "/proposals": {}
  "/vote": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/[brand]": never
  "/brand": never
  "/manufacturer": never
  "/vote": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
